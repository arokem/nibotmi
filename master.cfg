# -*- python -*-
# ex: set syntax=python:
# vim: set ft=python
# NIpy buildBOT Master Instance config
#
# [ TODO ]      (in no particular order)
# - combine multiple steps into one (if possible)
# - rename steps to be more concise and informative
# - generate numpy version based templates
# - what's up with the buildout not using ~/.buildout/default.cfg and not caching
#       * we may need to set some properties for this to work
# - install more versions of python on the slaves
# - have slaves report back their configuration (so we have them doing the right builders)
# - if possible, forcebuild every builder on a particular slave (to check that it can)
# - hookup with git post-commit hooks (instead of relying on poller)

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
import nipybuildbot
reload(nipybuildbot)

from nipybuildbot import slaves, slaves26,experimental
# XXX: slave names must be unique
c['slaves'] = slaves

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of nibabel.

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = [
        GitPoller(
                'git://github.com/nipy/nibabel.git',
                workdir='gitpoller/nibabel', branch='master',
                pollinterval=300),
        GitPoller(
                'git://github.com/nipy/nitime.git',
                workdir='gitpoller/nitime', branch='master',
                pollinterval=300),
        GitPoller(
                'git://github.com/nipy/nipy.git',
                workdir='gitpoller/nipy', branch='master',
                pollinterval=300),
        GitPoller(
                'git://github.com/matthew-brett/nipy.git',
                workdir='gitpoller/nipy_mbi', branch='integration',
                pollinterval=300),
        GitPoller(
                'git://github.com/Garyfallidis/dipy.git',
                workdir='gitpoller/dipy', branch='master',
                pollinterval=300),
        ]

####### SCHEDULERS
# Configure the Schedulers, which decide how to react to incoming changes.
from buildbot.schedulers.filter import ChangeFilter
from buildbot.scheduler import Scheduler
c['schedulers'] = []
c['schedulers'].append(
                Scheduler(name="nibabel", 
                        change_filter=ChangeFilter(repository="git://github.com/nipy/nibabel.git"),
                        treeStableTimer=None,
                        builderNames=["nibabel-py2.6"]))
c['schedulers'].append(
                Scheduler(name="nitime", 
                        change_filter=ChangeFilter(repository="git://github.com/nipy/nitime.git"),
                        treeStableTimer=None,
                        builderNames=["nitime-py2.6"]))
c['schedulers'].append(
                Scheduler(name="nipy", 
                        change_filter=ChangeFilter(repository="git://github.com/nipy/nipy.git"),
                        treeStableTimer=None,
                        builderNames=["nipy-py2.6"]))
c['schedulers'].append(
                Scheduler(name="nipy-mbi", 
                        change_filter=ChangeFilter(repository="git://github.com/matthew-brett/nipy.git"),
                        treeStableTimer=None,
                        builderNames=["nipy-py2.6-mbi"]))
c['schedulers'].append(
                Scheduler(name="dipy", 
                        change_filter=ChangeFilter(repository="git://github.com/Garyfallidis/dipy.git"),
                        treeStableTimer=None,
                        builderNames=["dipy-py2.6"]))


####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.steps.transfer import FileDownload,FileUpload
from buildbot.process.properties import WithProperties

# This is convenient for splitting sh commands into lists
import shlex

def nptest_command(pkg_name, verbose=10, doctests=False, python='python'):
    """ Script for numpy.test based testers like nipy """
    pystr = ("import sys; import %s; sys.exit(not %s.test(doctests=%s"
            % (pkg_name, pkg_name, doctests))
    if verbose != None:
        pystr += ', verbose=%d' % verbose
    pystr += ", extra_argv=['--first-package-wins']).wasSuccessful())"
    return ShellCommand(command=[python, '-c', "%s" % pystr]) 

def nosetests_command(pkg_name, doctests=False):
    """ Script for nosetests-based testers like nibabel """
    cmds = ['nosetests', '--verbosity=3', pkg_name]
    if doctests:
        cmds.append('--with-doctest')
    return ShellCommand(command=cmds)

factory_nibabel = BuildFactory()
# check out the source
factory_nibabel.addStep(Git(repourl='git://github.com/nipy/nibabel.git', mode='copy'))
# run the tests (note that this will require that 'nosetests' is installed)
factory_nibabel.addStep(nosetests_command('nibabel', doctests=True))

def factory_buildout_nibabel(python='python2.6',numpy='1.6.1'):
    f = BuildFactory()
    # check out the source
    # XXX: the mastersrc should make appropriate changes based on numpy version
    f.addStep(Git(repourl='git://github.com/nipy/nibabel.git', mode='copy'))
    f.addStep(FileDownload(mastersrc="bootstrap.py",
                                          slavedest="bootstrap.py"))
    f.addStep(FileDownload(mastersrc="nibabel_buildout.cfg",
                                          slavedest="buildout.cfg"))
    f.addStep(ShellCommand(command=[python, "bootstrap.py"]))
    f.addStep(ShellCommand(command=["bin/buildout"]))
    f.addStep(nptest_command('nibabel',python='bin/buildoutpython'))
    # run the tests (note that this will require that 'nosetests' is installed)
    #f.addStep(nosetests_command('nibabel', doctests=True))
    return f

    
factory_nibabel = BuildFactory()
factory_nitime = BuildFactory()
# check out the source
factory_nitime.addStep(Git(repourl='git://github.com/nipy/nitime.git', mode='copy'))
# run the tests
factory_nitime.addStep(nptest_command('nitime', verbose=None, doctests=False))

factory_nipy = BuildFactory()
# check out the source
factory_nipy.addStep(Git(repourl='git://github.com/nipy/nipy.git', mode='copy'))
# Build the code
factory_nipy.addStep(ShellCommand(command=shlex.split("python setup.py build_ext --inplace")))
# run the tests (note that this will require that 'nosetests' is installed)
factory_nipy.addStep(nptest_command('nipy', doctests=True))

factory_nipy_mbi = BuildFactory()
# check out the source
factory_nipy_mbi.addStep(Git(repourl='git://github.com/matthew-brett/nipy.git', branch='integration', mode='copy'))
# Build the code
factory_nipy_mbi.addStep(ShellCommand(command=shlex.split("python setup.py build_ext --inplace")))
# Get the working directory
factory_nipy_mbi.addStep(SetProperty(command=["python", "-c", "import os, sys; print os.getcwd(); sys.exit(0)"], property='absBuildDir'))
# run the tests (requires nose)
factory_nipy_mbi.addStep(ShellCommand(
            command=['python', '-c', 'import sys, nipy.fixes; sys.exit(not nipy.fixes.test(verbose=3, extra_argv=["--first-package-wins"]).wasSuccessful())'],
            env={'PYTHONPATH': [WithProperties('%s', 'absBuildDir')]}))
#factory_nipy_mbi.addStep(ShellCommand(
#            command=['python', 'tools/nipnost', 'nipy', '--verbosity=3'],
#            env={'PYTHONPATH': [WithProperties('%s', 'absBuildDir')]}))
    
factory_dipy = BuildFactory()
# check out the source
factory_dipy.addStep(Git(repourl='git://github.com/Garyfallidis/dipy.git', mode='copy'))
# Build the code
factory_dipy.addStep(ShellCommand(command=shlex.split("python setup.py build_ext --inplace")))
# run the tests (note that this will require that 'nosetests' is installed)
factory_dipy.addStep(nosetests_command('dipy', doctests=True))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="nibabel-py2.6",
      slavenames=slaves26,
      factory=factory_nibabel))
c['builders'].append(
    BuilderConfig(name="nibabel-py2.6-osx-10.4",
      slavenames=['jerry-standard'],
      factory=factory_nibabel))
c['builders'].append(
    BuilderConfig(name="nibabel-py2.6-xp",
      slavenames=['xp-standard'],
      factory=factory_nibabel))
c['builders'].append(
    BuilderConfig(name="nitime-py2.6",
      slavenames=slaves26,
      category='nitime',
      factory=factory_nitime))
c['builders'].append(
    BuilderConfig(name="nitime-py2.6-osx-10.4",
      slavenames=['jerry-standard'],
      factory=factory_nitime))
c['builders'].append(
    BuilderConfig(name="nitime-py2.6-xp",
      slavenames=['xp-standard'],
      factory=factory_nitime))
c['builders'].append(
    BuilderConfig(name="nipy-py2.6",
      slavenames=slaves26,
      category='nipy',
      factory=factory_nipy))
c['builders'].append(
    BuilderConfig(name="nipy-py2.6-mbi",
      slavenames=slaves26,
      category='nipy',
      factory=factory_nipy_mbi))
c['builders'].append(
    BuilderConfig(name="dipy-py2.6",
      slavenames=slaves26,
      factory=factory_dipy))

c['builders'].append(
    BuilderConfig(name="buildout-test2.6",
      slavenames=experimental,
      factory=factory_buildout_nibabel()))
c['builders'].append(
    BuilderConfig(name="buildout-test2.5",
      slavenames=experimental,
      factory=factory_buildout_nibabel('python2.5')))
c['builders'].append(
    BuilderConfig(name="buildout-test2.4",
      slavenames=experimental,
      factory=factory_buildout_nibabel('python2.4')))
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NiPy"
c['titleURL'] = "http://nipy.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

