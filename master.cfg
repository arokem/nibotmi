# -*- python -*-
# ex: set syntax=python:
# vim: set ft=python
# NIpy buildBOT Master Instance config
#
# [ TODO ]      (in no particular order)
# - combine multiple steps into one (if possible)
# - rename steps to be more concise and informative
# - generate numpy version based templates
# - what's up with the buildout not using ~/.buildout/default.cfg and not caching
#       * we may need to set some properties for this to work
# - install more versions of python on the slaves
# - have slaves report back their configuration (so we have them doing the right builders)
# - if possible, forcebuild every builder on a particular slave (to check that it can)
# - hookup with git post-commit hooks (instead of relying on poller)

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is convenient for splitting sh commands into lists
import shlex
# Buildbot objects
from buildbot.changes.gitpoller import GitPoller
from buildbot.schedulers.filter import ChangeFilter
from buildbot.scheduler import Scheduler
from buildbot.process.factory import BuildFactory
from buildbot.steps.source import Git
from buildbot.steps.shell import ShellCommand, SetProperty
from buildbot.steps.transfer import FileDownload,FileUpload
from buildbot.process.properties import WithProperties
from buildbot.config import BuilderConfig

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
import nipybuildbot
reload(nipybuildbot)

from nipybuildbot import slaves, experimental
linux_64_slaves = ['tom-standard']
linux_32_slaves = ['bongoslave']
osx_leopard_ppc_slaves = ['osx-10.5-ppc']
osx_tiger_ppc_slaves = ['osx-mini']
osx_tiger_intel_slaves = ['osx-10.4-intel']
debian_ppc_slaves = ['debian-ppc-32']
osx_leopard_intel_slaves = ['osx-10.5']
xp_32_slaves = ['xp-standard', 'xp-mini']
sparc_slaves = ['nd-bb-slave-sparc']
arm_slaves = ['arm-raspberry-pi']

# XXX: slave names must be unique
c['slaves'] = slaves

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989

# Helper functions and constants
class GithubBot(object):
    def __init__(self, organization, repo):
        self.organization = organization
        self.repo = repo
        self.git_url = "git://github.com/%s/%s.git" % (organization, repo)

    def poller(self, branch="master", interval=300):
        return GitPoller(
            self.git_url,
            workdir = "%s-%s-%s" % (self.organization, self.repo, branch),
            branch=branch,
            pollinterval=interval)

    def scheduler(self, buildernames):
        if isinstance(buildernames, basestring):
            buildernames = [buildernames]
        name = "%s-%s" % (self.organization, self.repo)
        changefilter = ChangeFilter(repository=self.git_url)
        return Scheduler(name=name,
                        change_filter=changefilter,
                        treeStableTimer=None,
                        builderNames=buildernames)

    def factory(self, test_command):
        factory = BuildFactory()
        factory.addStep(Git(repourl=self.git_url, mode='copy', retry=(15, 5)))
        factory.addStep(ShellCommand(command=shlex.split(
            "python setup.py build_ext --inplace")))
        factory.addStep(SetProperty(command=shlex.split(
            "python -c 'import os, sys; print os.getcwd(); sys.exit(0)'"),
            property='absBuildDir'))
        factory.addStep(ShellCommand(command=test_command,
            env={'PYTHONPATH': [WithProperties('%s', 'absBuildDir')]}))
        return factory

    def build_builders(self, name_slavenames, test_command):
        factory = self.factory(test_command)
        builders = []
        for name, slavelist in name_slavenames:
            if isinstance(slavelist, basestring):
                slavelist = [slavelist]
            builders.append(BuilderConfig(
                name=name,
                slavenames=slavelist,
                factory=factory))
        return builders


nibabel_bot = GithubBot('nipy', 'nibabel')
nitime_bot = GithubBot('nipy', 'nitime')
nitime_arokem_bot = GithubBot('arokem','nitime')
nipy_bot = GithubBot('nipy', 'nipy')
nipy_mbi_bot = GithubBot('matthew-brett', 'nipy')
nipy_alexis_bot = GithubBot('alexis-roche', 'nipy')
dipy_bot = GithubBot('nipy', 'dipy')
nipype_bot = GithubBot('nipy', 'nipype')

                                             
####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of nibabel.

#TODO: We should probably change the GitPoller to a PBChangeSource to react to
# commits http://buildbot.net/buildbot/docs/latest/manual/cfg-changesources.html#chsrc-PBChangeSource
c['change_source'] = [bot.poller() for bot in (nibabel_bot,
                                               nitime_bot,
                                               nipy_bot,
                                               dipy_bot,
                                               nipype_bot)]


####### SCHEDULERS
# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = [
    nibabel_bot.scheduler(['nibabel-py2.6',
                           'nibabel-py2.6-32',
                           'nibabel-py2.6-xp',
                           'nibabel-py2.6-sparc',
                           'nibabel-py2.7-ppc',
                           'nibabel-py2.6-arm',
                           'nibabel-py2.5-osx-10.4-ppc',
                           'nibabel-py2.7-osx-10.4-intel',
                           'nibabel-py2.6-osx-10.5-ppc',
                           'nibabel-py2.6-osx-10.5-intel',
                          ]),
    nitime_bot.scheduler(['nitime-py2.6',
                          'nitime-py2.6-32',
                          'nitime-py2.6-xp',
                          'nitime-py2.5-osx-10.4-ppc',
                          'nitime-py2.7-osx-10.4-intel',
                          'nitime-py2.6-osx-10.5-ppc',
                          'nitime-py2.6-osx-10.5-intel',
                         ]),
    nipy_bot.scheduler(['nipy-py2.6',
                        'nipy-py2.6-32',
                        'nipy-py2.6-xp',
                        'nipy-py2.6-sparc',
                        'nipy-py2.7-ppc',
                        'nipy-py2.6-arm',
                        'nipy-py2.5-osx-10.4-ppc',
                        'nipy-py2.7-osx-10.4-intel',
                        'nipy-py2.6-osx-10.5-ppc',
                        'nipy-py2.6-osx-10.5-intel',
                       ]),
    dipy_bot.scheduler(['dipy-py2.6',
                        'dipy-py2.6-32',
                        'dipy-py2.6-xp',
                        'dipy-py2.5-osx-10.4-ppc',
                        'dipy-py2.7-osx-10.4-intel',
                        'dipy-py2.6-osx-10.5-ppc',
                        'dipy-py2.6-osx-10.5-intel',
                       ]),
    nipype_bot.scheduler(['nipype-py2.6',
                        'nipype-py2.6-32',
                        'nipype-py2.5-osx-10.4-ppc',
                        'nipype-py2.6-osx-10.5-ppc',
                        'nipype-py2.6-osx-10.5-intel',
                       ]),
]

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

def nptest_command(pkg_name,
                   verbose=10,
                   doctests=False,
                   python='python',
                   cd=False,
                   stdout=False):
    """ Run tests from new directory """
    pystr = ''
    if cd:
        pystr += "import os; os.chdir('..');"
    pystr += ("import sys; import %s; sys.exit(not %s.test(doctests=%s"
              % (pkg_name, pkg_name, doctests))
    if verbose != None:
        pystr += ', verbose=%d' % verbose
    pystr += ").wasSuccessful())"
    return [python, '-c', "%s" % pystr]


def factory_buildout_nibabel(python='python2.6',numpy='1.6.1'):
    f = BuildFactory()
    # check out the source
    # XXX: the mastersrc should make appropriate changes based on numpy version
    f.addStep(Git(repourl='git://github.com/nipy/nibabel.git', mode='copy'))
    f.addStep(FileDownload(mastersrc="bootstrap.py",
                                          slavedest="bootstrap.py"))
    f.addStep(FileDownload(mastersrc="nibabel_buildout.cfg",
                                          slavedest="buildout.cfg"))
    f.addStep(ShellCommand(command=[python, "bootstrap.py"]))
    f.addStep(ShellCommand(command=["bin/buildout"]))
    f.addStep(ShellCommand(nptest_command('nibabel',python='bin/buildoutpython')))
    # run the tests (note that this will require that 'nosetests' is installed)
    #f.addStep(nosetests_command('nibabel', doctests=True))
    return f

c['builders'] = nibabel_bot.build_builders(
    (('nibabel-py2.6', linux_64_slaves),
     ('nibabel-py2.6-32', linux_32_slaves),
     ('nibabel-py2.5-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nibabel-py2.7-osx-10.4-intel', osx_tiger_intel_slaves),
     ('nibabel-py2.6-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nibabel-py2.6-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nibabel-py2.7-ppc', debian_ppc_slaves),
     ('nibabel-py2.6-arm', arm_slaves),
     ('nibabel-py2.6-xp', xp_32_slaves),
     ('nibabel-py2.6-sparc', sparc_slaves)),
    shlex.split('nosetests --verbosity=3 --with-doctest nibabel'))
c['builders'] += nitime_bot.build_builders(
    (('nitime-py2.6', linux_64_slaves),
     ('nitime-py2.6-32', linux_32_slaves),
     ('nitime-py2.5-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nitime-py2.7-osx-10.4-intel', osx_tiger_intel_slaves),
     ('nitime-py2.6-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nitime-py2.6-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nitime-py2.6-arm', arm_slaves),
     ('nitime-py2.6-xp', xp_32_slaves)),
    nptest_command('nitime', verbose=None, cd=True))
c['builders'] += nitime_arokem_bot.build_builders(
    (('nitime-py2.6-arokem', linux_64_slaves),
     ('nitime-py2.6-arokem-32', linux_32_slaves),
     ('nitime-py2.5-arokem-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nitime-py2.7-arokem-osx-10.4-intel', osx_tiger_intel_slaves),
     ('nitime-py2.6-arokem-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nitime-py2.6-arokem-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nitime-py2.6-arokem-xp', xp_32_slaves)),
    nptest_command('nitime', verbose=None, cd=True))
c['builders'] += nipy_bot.build_builders(
    (('nipy-py2.6', linux_64_slaves),
     ('nipy-py2.6-32', linux_32_slaves),
     ('nipy-py2.5-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nipy-py2.7-osx-10.4-intel', osx_tiger_intel_slaves),
     ('nipy-py2.6-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nipy-py2.6-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nipy-py2.7-ppc', debian_ppc_slaves),
     ('nipy-py2.6-arm', arm_slaves),
     ('nipy-py2.6-xp', xp_32_slaves),
     ('nipy-py2.6-sparc', sparc_slaves)),
    nptest_command('nipy', doctests=True, cd=True))
c['builders'] += nipy_mbi_bot.build_builders(
    (('nipy-py2.6-mbi', linux_64_slaves),
     ('nipy-py2.6-mbi-32', linux_32_slaves),
     ('nipy-py2.5-mbi-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nipy-py2.6-mbi-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nipy-py2.6-mbi-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nipy-py2.6-mbi-xp', xp_32_slaves)),
    nptest_command('nipy', doctests=True, cd=True))
c['builders'] += nipy_alexis_bot.build_builders(
    (('nipy-py2.6-alexis', linux_64_slaves),
     ('nipy-py2.6-alexis-32', linux_32_slaves),
     ('nipy-py2.5-alexis-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nipy-py2.6-alexis-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nipy-py2.6-alexis-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nipy-py2.6-alexis-xp', xp_32_slaves)),
    nptest_command('nipy', doctests=True, cd=True))
# The dipy builder seems to fail early sometimes, on OSX, maybe due to:
# http://bugs.python.org/issue8458
c['builders'] += dipy_bot.build_builders(
    (('dipy-py2.6', linux_64_slaves),
     ('dipy-py2.6-32', linux_32_slaves),
     ('dipy-py2.5-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('dipy-py2.7-osx-10.4-intel', osx_tiger_intel_slaves),
     ('dipy-py2.6-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('dipy-py2.6-osx-10.5-intel', osx_leopard_intel_slaves),
     ('dipy-py2.6-arm', arm_slaves),
     ('dipy-py2.6-xp', xp_32_slaves)),
    shlex.split('nosetests --verbosity=3 --with-doctest dipy'))
c['builders'] += nipype_bot.build_builders(
    (('nipype-py2.6', linux_64_slaves),
     ('nipype-py2.6-32', linux_32_slaves),
     ('nipype-py2.5-osx-10.4-ppc', osx_tiger_ppc_slaves),
     ('nipype-py2.6-osx-10.5-ppc', osx_leopard_ppc_slaves),
     ('nipype-py2.6-osx-10.5-intel', osx_leopard_intel_slaves),
     ('nipype-py2.6-arm', arm_slaves)),
    nptest_command('nipype', doctests=True, cd=True))

c['builders'].append(
    BuilderConfig(name="buildout-test2.6",
      slavenames=experimental,
      factory=factory_buildout_nibabel()))
c['builders'].append(
    BuilderConfig(name="buildout-test2.5",
      slavenames=experimental,
      factory=factory_buildout_nibabel('python2.5')))
c['builders'].append(
    BuilderConfig(name="buildout-test2.4",
      slavenames=experimental,
      factory=factory_buildout_nibabel('python2.4')))
####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz

http_auth = auth.HTPasswdAuth('bot_htpasswd')

authz_cfg=authz.Authz(
    auth = http_auth,
    # change any of these to True to enable; 'auth' to require authorization'
    # see the manual for more options
    gracefulShutdown = False,
    forceBuild = 'auth',
    forceAllBuilds = 'auth',
    pingBuilder = False,
    stopBuild = 'auth',
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY
# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "NiPy"
c['titleURL'] = "http://nipy.org"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

